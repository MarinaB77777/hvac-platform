from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from typing import List, Optional
from datetime import datetime

from app.db import get_db
from app.services.auth import get_current_user
from app.models.material_usage import MaterialUsage
from app.schemas.material_usage import MaterialUsageCreate, MaterialUsageOut
from app.models.user import User

router = APIRouter(prefix="/material-usage", tags=["Material Usage"])


def serialize_usage(usage: MaterialUsage) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Pydantic-—Å—Ö–µ–º–µ MaterialUsageOut,
    –∏ –ø—Ä–∏ —ç—Ç–æ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –º–∞–ø–ø–∏–º used_date -> used_at.
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫–ª–∞–¥—ë–º "qty_used" –∏ "cost" –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞ (–ª–∏—à–Ω–∏–µ –ø–æ–ª—è –º–æ–¥–µ–ª—å –æ—Ç–±—Ä–æ—Å–∏—Ç).
    """
    return {
        "id": usage.id,
        "hvac_id": usage.hvac_id,
        "order_id": usage.order_id,
        "material_id": usage.material_id,
        "quantity_used": usage.quantity_used,
        # –¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–æ–≥–¥–∞ —á–∏—Ç–∞–µ—Ç qty_used
        "qty_used": usage.quantity_used,
        # Pydantic –∂–¥—ë—Ç used_at ‚Äî –¥–∞—ë–º –µ–≥–æ –∏–∑ used_date
        "used_at": usage.used_date,
        # –∫–æ–ø–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        "name": usage.name,
        "brand": usage.brand,
        "model": usage.model,
        "specs": usage.specs,
        "price_usd": usage.price_usd,
        "price_mxn": usage.price_mxn,
        # –ò–Ω–æ–≥–¥–∞ —Ñ—Ä–æ–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç "cost" ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º MXN –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ USD
        "cost": usage.price_mxn if usage.price_mxn is not None else usage.price_usd,
    }


# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
@router.post("/", response_model=MaterialUsageOut)
def create_usage(
    usage_in: MaterialUsageCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user),
):
    if current_user.role != "hvac":
        raise HTTPException(status_code=403, detail="Only HVAC can create usage entries")

    usage = MaterialUsage(**usage_in.dict())

    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ—Å—Ç–∞–≤–∏–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –ë–î –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –≤—ã—Å—Ç–∞–≤–∏—Ç default
    if usage.used_date is None:
        usage.used_date = datetime.utcnow()

    db.add(usage)
    db.commit()
    db.refresh(usage)
    return serialize_usage(usage)


# üîπ –ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ HVAC (–æ–ø—Ü. —Ñ–∏–ª—å—Ç—Ä –ø–æ –∑–∞–∫–∞–∑—É)
@router.get("/by-hvac/{hvac_id}", response_model=List[MaterialUsageOut])
def get_by_hvac(
    hvac_id: int,
    order_id: Optional[int] = Query(None),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user),
):
    if current_user.role not in ["hvac", "manager", "warehouse"]:
        raise HTTPException(status_code=403, detail="Access denied")

    query = db.query(MaterialUsage).filter(MaterialUsage.hvac_id == hvac_id)
    if order_id is not None:
        query = query.filter(MaterialUsage.order_id == order_id)

    usages = query.all()
    return [serialize_usage(u) for u in usages]
