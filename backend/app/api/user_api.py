from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from passlib.hash import bcrypt
 

from app.db import get_db
from app.models.user import User
from app.schemas.user import UserCreate, UserUpdate, ChangePasswordRequest
from app.services.auth import get_current_user

router = APIRouter()

@router.post("/register")
def register(user_data: UserCreate, db: Session = Depends(get_db)):
    # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    existing_user = db.query(User).filter(User.phone == user_data.phone).first()
    if existing_user:
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    # üîê –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    hashed_password = bcrypt.hash(user_data.password)

    # ‚úÖ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user = User(
        name=user_data.name,
        phone=user_data.phone,
        hashed_password=hashed_password,
        role=user_data.role,
        location=user_data.location,
        qualification=user_data.qualification or None,
        rate=user_data.rate if user_data.rate is not None else None,
        status=user_data.status or "active",
    )

    db.add(new_user)
    try:
        db.commit()
        db.refresh(new_user)
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")

    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "id": new_user.id}
# üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è /users/me)
@router.get("/users/me")
def get_me(current_user: User = Depends(get_current_user)):
    return {
        "id": current_user.id,
        "name": current_user.name,
        "phone": current_user.phone,
        "role": current_user.role,
        "location": current_user.location,
        "qualification": current_user.qualification,
        "rate": current_user.rate,
        "status": current_user.status,
        "address": current_user.address
    }
@router.patch("/users/me")
def update_me(
    user_update: UserUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    # üîÑ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ location –∫–∞–∫ —Å—Ç—Ä–æ–∫—É "lat,lon"
    if user_update.location is not None:
    current_user.location = user_update.location

    # üîÑ –ò–º—è
    if user_update.name is not None:
        current_user.name = user_update.name

    # üîÑ –¢–µ–ª–µ—Ñ–æ–Ω
    if user_update.phone is not None:
        current_user.phone = user_update.phone

    # üîÑ –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
    if user_update.qualification is not None:
        current_user.qualification = user_update.qualification

    # üîÑ –¢–∞—Ä–∏—Ñ
    if user_update.rate is not None:
        current_user.rate = user_update.rate

    # üîÑ –°—Ç–∞—Ç—É—Å
    if user_update.status is not None:
        current_user.status = user_update.status

    # üîÑ –ê–¥—Ä–µ—Å
    if user_update.address is not None:
        current_user.address = user_update.address

    # üîÑ –†–æ–ª—å (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –º–µ–Ω—è—Ç—å ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —Ç—Ä–æ–≥–∞–µ–º)
    if user_update.role is not None:
        current_user.role = user_update.role

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º
    db.add(current_user)
    db.commit()
    db.refresh(current_user)

    return {
        "message": "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω",
        "id": current_user.id,
        "name": current_user.name,
        "phone": current_user.phone,
        "role": current_user.role,
        "location": current_user.location,
        "qualification": current_user.qualification,
        "rate": current_user.rate,
        "status": current_user.status,
        "address": current_user.address
    }

@router.post("/users/change-password")
def change_password(
    data: ChangePasswordRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if not bcrypt.verify(data.old_password, current_user.hashed_password):
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å")

    current_user.hashed_password = bcrypt.hash(data.new_password)
    db.add(current_user)
    db.commit()
    db.refresh(current_user)

    return {"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω"}
