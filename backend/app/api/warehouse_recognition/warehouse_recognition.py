# backend/app/api/warehouse_recognition/warehouse_recognition.py

from fastapi import APIRouter, File, UploadFile, HTTPException
from fastapi.responses import JSONResponse
from PIL import Image, UnidentifiedImageError
import pytesseract
import io
import re
import shutil

router = APIRouter(
    prefix="/warehouse",
    tags=["warehouse_recognition"]
)

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è tesseract
tesseract_path = shutil.which("tesseract")
print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ tesseract_path: {tesseract_path}")

if tesseract_path:
    pytesseract.pytesseract.tesseract_cmd = tesseract_path
    print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å –∫ Tesseract: {tesseract_path}")
else:
    manual_path = "/usr/bin/tesseract"
    pytesseract.pytesseract.tesseract_cmd = manual_path
    print(f"‚ö†Ô∏è Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü—Ä–æ–±—É–µ–º –≤—Ä—É—á–Ω—É—é: {manual_path}")

@router.post("/recognize-image")
async def recognize_image(image: UploadFile = File(...)):
    try:
        print(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image.filename}")
        contents = await image.read()

        # üñº –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ RGB
        try:
            pil_image = Image.open(io.BytesIO(contents)).convert("RGB")
        except UnidentifiedImageError:
            raise HTTPException(status_code=400, detail="‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        # üß† –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        try:
            recognized_text = pytesseract.image_to_string(pil_image)
            print(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{recognized_text}")
        except Exception as e:
            print(f"üî• –û—à–∏–±–∫–∞ Tesseract: {e}")
            raise HTTPException(status_code=500, detail="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")

        # üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        model_match = re.search(r'MODEL\s*[:\-]?\s*([A-Z0-9\-]+)', recognized_text, re.IGNORECASE)
        brand_match = re.search(r'(?i)(electrolux|samsung|lg|bosch|siemens)', recognized_text)
        pnc_match = re.search(r'PNC\s*[:\-]?\s*([\d\s]+)', recognized_text, re.IGNORECASE)
        serial_match = re.search(r'SERIAL\s*[:\-]?\s*(\S+)', recognized_text, re.IGNORECASE)

        result = {
            "brand": brand_match.group(1).capitalize() if brand_match else None,
            "model": model_match.group(1) if model_match else None,
            "pnc": pnc_match.group(1).replace(" ", "") if pnc_match else None,
            "serial": serial_match.group(1) if serial_match else None,
        }

        print(f"‚úÖ –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {result}")
        return JSONResponse(content=result)

    except Exception as e:
        print(f"üî• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
