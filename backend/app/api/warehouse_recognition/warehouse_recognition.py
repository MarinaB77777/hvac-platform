# backend/app/api/warehouse_recognition/warehouse_recognition.py

from fastapi import APIRouter, File, UploadFile, HTTPException
from fastapi.responses import JSONResponse
from PIL import Image, UnidentifiedImageError
import pytesseract
import os
import io
import re
import shutil
from datetime import datetime

router = APIRouter(
    prefix="/warehouse",
    tags=["warehouse_recognition"]
)

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ tesseract
tesseract_path = shutil.which("tesseract") or os.getenv("TESSERACT_CMD", "/usr/bin/tesseract")

if not tesseract_path:
    raise RuntimeError("‚ùå Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ PATH, –Ω–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TESSERACT_CMD")

pytesseract.pytesseract.tesseract_cmd = tesseract_path
print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è tesseract: {tesseract_path}")

@router.post("/recognize-image")
async def recognize_image(image: UploadFile = File(...)):
    try:
        print(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image.filename}")
        contents = await image.read()

        # üîç –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            pil_image = Image.open(io.BytesIO(contents)).convert("RGB")
        except UnidentifiedImageError:
            raise HTTPException(status_code=400, detail="‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        # üß† –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç
        try:
            recognized_text = pytesseract.image_to_string(pil_image)
            print(f"üßæ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{recognized_text}")
        except Exception as e:
            print(f"üî• –û—à–∏–±–∫–∞ Tesseract: {str(e)}")
            raise HTTPException(status_code=500, detail="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")

        # üîç –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
        model_match = re.search(r'MODEL\s*[:\-]?\s*([\w\-\/]+)', recognized_text, re.IGNORECASE)
        pnc_match = re.search(r'PNC\s*[:\-]?\s*([\w\-]+)', recognized_text, re.IGNORECASE)
        serial_match = re.search(r'SERIAL\s*NO\s*[:\-]?\s*([\w\-]+)', recognized_text, re.IGNORECASE)

        data = {
            "model": model_match.group(1) if model_match else None,
            "pnc": pnc_match.group(1) if pnc_match else None,
            "serial": serial_match.group(1) if serial_match else None,
            "status": "pending",
            "recognized_at": datetime.utcnow().isoformat()
        }

        print(f"üì¶ –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        return JSONResponse(content=data)

    except Exception as e:
        print(f"üî• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {str(e)}")
        raise HTTPException(status_code=500, detail="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")
