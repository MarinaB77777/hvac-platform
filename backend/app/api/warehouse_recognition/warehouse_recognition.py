# backend/app/api/warehouse_recognition/warehouse_recognition.py

from fastapi import APIRouter, File, UploadFile, HTTPException
from fastapi.responses import JSONResponse
from PIL import Image, UnidentifiedImageError
import pytesseract
import shutil
import os
import io
import re

router = APIRouter(
    prefix="/warehouse",
    tags=["warehouse_recognition"]
)

# üõ† –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ tesseract, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ PATH
tesseract_path = shutil.which("tesseract")
if not tesseract_path:
    print("‚ùóÔ∏ètesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH, —É–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é")
    pytesseract.pytesseract.tesseract_cmd = "/usr/bin/tesseract"
else:
    print(f"‚úÖ tesseract –Ω–∞–π–¥–µ–Ω: {tesseract_path}")

@router.post("/recognize-image")
async def recognize_image(image: UploadFile = File(...)):
    try:
        print(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image.filename}")

        contents = await image.read()

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            pil_image = Image.open(io.BytesIO(contents)).convert("RGB")
        except UnidentifiedImageError:
            raise HTTPException(status_code=400, detail="‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç
        try:
            recognized_text = pytesseract.image_to_string(pil_image)
            print("üî§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", recognized_text)
        except Exception as e:
            print("üî• –û—à–∏–±–∫–∞ Tesseract:", e)
            raise HTTPException(status_code=500, detail="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")

        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        model_match = re.search(r'MODEL[:\s]*([A-Z0-9\-]+)', recognized_text, re.IGNORECASE)
        pnc_match = re.search(r'PNC[:\s#]*([0-9\s]{6,})', recognized_text, re.IGNORECASE)
        serial_match = re.search(r'(?:Serial|S\/N|SN|SN-T)[:\s]*([A-Z0-9\- ]+)', recognized_text, re.IGNORECASE)
        brand_match = re.search(r'Electrolux|Samsung|LG|Bosch|Whirlpool|GE', recognized_text, re.IGNORECASE)

        return {
            "model": model_match.group(1).strip() if model_match else None,
            "pnc": pnc_match.group(1).strip() if pnc_match else None,
            "serial_number": serial_match.group(1).strip() if serial_match else None,
            "brand": brand_match.group(0).strip() if brand_match else None,
            "raw_text": recognized_text,
        }

    except Exception as e:
        print("üî• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏:", str(e))
        raise HTTPException(status_code=500, detail="‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏")
