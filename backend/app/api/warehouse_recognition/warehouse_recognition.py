# backend/app/api/warehouse_recognition.py

import os
import uuid
from datetime import datetime
from fastapi import APIRouter, UploadFile, File, Depends, HTTPException
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from app.db import get_db
from app.models.material import Material
from app.services.auth import get_current_user
import pytesseract
from PIL import Image
from io import BytesIO
import logging

router = APIRouter()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ Tesseract (–¥–ª—è Render –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π)
pytesseract.pytesseract.tesseract_cmd = os.getenv("TESSERACT_CMD", "/usr/bin/tesseract")
print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è tesseract: {pytesseract.pytesseract.tesseract_cmd}")

@router.post("/warehouse/recognize-image")
async def recognize_image(
    image: UploadFile = File(...),
    db: Session = Depends(get_db),
    user: dict = Depends(get_current_user),
):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
        filename = image.filename
        contents = await image.read()
        print(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {filename}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ RGB –∏ —á–∏—Ç–∞–µ–º
        pil_image = Image.open(BytesIO(contents)).convert("RGB")

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        try:
            text = pytesseract.image_to_string(pil_image)
        except Exception as e:
            print(f"üî• –û—à–∏–±–∫–∞ Tesseract: {e}")
            raise HTTPException(status_code=500, detail="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        def extract_field(label):
            for line in text.splitlines():
                if label.lower() in line.lower():
                    return line.split(":")[-1].strip()
            return None

        model = extract_field("model")
        brand = extract_field("brand")
        pnc = extract_field("pnc")
        serial = extract_field("serial")

        if not any([model, brand, pnc, serial]):
            print("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ –∏–∑ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            raise HTTPException(status_code=422, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        material = {
            "name": "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª",
            "model": model,
            "brand": brand,
            "specs": f"PNC: {pnc}, SN: {serial}",
            "price_usd": None,
            "price_mxn": None,
            "arrival_date": datetime.utcnow().date().isoformat(),
            "stock": None,
            "qty_issued": 0,
            "status": "pending",
            "photo_url": f"/media/{filename}",  # –ø—É—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        }

        print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", material)
        return JSONResponse(content=material)

    except Exception as e:
        print(f"üî• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")
