# backend/app/api/warehouse_recognition.py

import os
import uuid
from datetime import datetime
from fastapi import APIRouter, UploadFile, File, Depends, HTTPException
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from app.db import get_db
from app.models.material import Material
from app.services.auth import get_current_user
import pytesseract
from PIL import Image, UnidentifiedImageError
from io import BytesIO
import logging
import shutil

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è tesseract
tesseract_path = shutil.which("tesseract")
print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ tesseract path: {tesseract_path}")

if not tesseract_path:
    print("‚ùóÔ∏ètesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH, —É–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é")
    pytesseract.pytesseract.tesseract_cmd = "/usr/bin/tesseract"
else:
    print(f"‚úÖ tesseract –Ω–∞–π–¥–µ–Ω: {tesseract_path}")
    pytesseract.pytesseract.tesseract_cmd = tesseract_path

router = APIRouter()

@router.post("/warehouse/recognize-image")
async def recognize_image(
    image: UploadFile = File(...),
    db: Session = Depends(get_db),
    user: dict = Depends(get_current_user),
):
    try:
        filename = image.filename
        contents = await image.read()
        print(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {filename}")

        try:
            pil_image = Image.open(BytesIO(contents)).convert("RGB")
            print(f"üì∏ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {pil_image.size}, —Ñ–æ—Ä–º–∞—Ç: {pil_image.format}")
        except UnidentifiedImageError:
            raise HTTPException(status_code=400, detail="‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        print(f"üîß –ó–∞–ø—É—Å–∫–∞–µ–º OCR —Å –∫–æ–º–∞–Ω–¥–æ–π: {pytesseract.pytesseract.tesseract_cmd}")
        try:
            text = pytesseract.image_to_string(pil_image)
        except Exception as e:
            print(f"üî• –û—à–∏–±–∫–∞ Tesseract: {e}")
            raise HTTPException(status_code=500, detail="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")

        def extract_field(label):
            for line in text.splitlines():
                if label.lower() in line.lower():
                    return line.split(":")[-1].strip()
            return None

        model = extract_field("model")
        brand = extract_field("brand")
        pnc = extract_field("pnc")
        serial = extract_field("serial")

        if not any([model, brand, pnc, serial]):
            print("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ –∏–∑ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            raise HTTPException(status_code=422, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è")

        material = {
            "name": "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª",
            "model": model,
            "brand": brand,
            "specs": f"PNC: {pnc}, SN: {serial}",
            "price_usd": None,
            "price_mxn": None,
            "arrival_date": datetime.utcnow().date().isoformat(),
            "stock": None,
            "qty_issued": 0,
            "status": "pending",
            "photo_url": f"/media/{filename}",
        }

        print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", material)
        return JSONResponse(content=material)

    except Exception as e:
        print(f"üî• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")
